unit Unit1;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, FileUtil, Forms, Controls, Graphics, Dialogs, StdCtrls, Unit2;

type

  { TForm1 }

  TForm1 = class(TForm)
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    Memo1: TMemo;
    Memo2: TMemo;
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
  private

  public

  end;

var
  Form1: TForm1;

  // Делаем матрицу и её размерность глобальными переменными
  // чтобы они были видны во всех функциях -
  // обработчиков нажатия кнопок
  M: Matr;
  n: integer;

implementation

{$R *.lfm}

{ TForm1 }

// удобно будет создать процедуру вывода матрицы в объект типа TMemo
// 'var mem:TMemo' так как мы будем изменять объект Memo - записывать в него
// Хотя это не обязательно, работает и без, тупо для приличия делаем так
procedure DisplayMatrix(M: Matr; n: integer; var AMemo: TMemo);
var
  // строковое представление одного числа
  s_x: string;
  // вспомогательная строка, чтобы добавить элементы матрицы
  // то есть это сумма строковых представлений каждого элемента(s_x) матрциы
  s: string;
  // переменные для циклов обхода матрицы
  i,j: integer;
begin
  // перед записью чего-то в Memo очищаем его
  // В Memo могла остаться старая матрица
  AMemo.Clear;

  // сначала мы будем собирать строку из элементов матрицы,
  // лежащих на i-ой строчке
  // Потом добавляем эту строку в Memo через Append
  for i:=1 to n do
  begin
    // присваиваем пустую строку про обработке каждой строки матрицы
    // То есть обработали одну строку, очистили переменную, обработать другую
    // иначе элементы с другой (предыдущей) строки будут выводиться и в новой строке
    s := '';
    for j:=1 to n do
    begin
      // преобразуем елемент матрицы в строку
      // число 5 - так же как и в writeln - ширина поля под число
      // чтобы не замарачиваться с пробелами при выводе
      str(M[i,j]:5, s_x);
      // по одному элементы i-ой строки собираем в одну строку
      s := s + s_x;
    end;
    // собрали одну строку, теперь добавляем её в Memo
    AMemo.Append(s);

  end;
end;

// Необязательно - по прихоти препода
{Считываем матрицу из Memo}
// 'var' чтобы изменить переменные передавааемые в функцию
// AMemo: TMemo без var т.к. мы только считываем оттуда
procedure ReadMatrix(var M: Matr; var n: integer; AMemo:TMemo);
var i, j: integer;
    c: integer; // номер столбца элемента - счётчик
    s_x: string; // строковое представление елемента матрицы

begin

  // Чтобы каждый раз не писать через точку, обращаясь к атрибутам AMemo
  // Раньше бы пришлось писать AMemo.Lines, теперь же просто достаточно
  // Написать только Lines
  with AMemo do
  begin
    // Перебираем строки из Memo, причом внутри with
    // не надо писать AMemo.Lines.Count
    for i:=0 to Lines.Count-1 do
    begin
      j :=1;  // Счётчик СИМВОЛОВ в строке
      c := 0; // Счётчик ЭЛЕМЕНТОВ - найденных ЧИСЕЛ
      // Перебираем i-ую строку посимвольно
      while (j <= length(Lines[i])) do
      begin
        // собираем из символов число
        s_x := ''; // cтрока цифр - элемент матрицы в виде строки
        while ((j <= length(Lines[i])) and (Lines[i][j] in ['0' .. '9'])) do
        begin
           s_x := s_x + Lines[i][j];
           j:= j + 1;
        end;

        // Нужно сделать проверку
        // Вдруг вначале стояли пробелы и мы даже не начали цикл выше
        // то есть Lines[i][j] in ['0' .. '9'] - ЛОЖЬ

        // если строковое представление элемента - НЕ пустая строка
        if (not (s_x = '')) then
        begin
          // Мы смогли собрать число
          // Увеличиваем счётчик элементов в одной строке
          c:= c + 1;
          // И добавляем число в матрицу
          // i+1 - тк строки в Memo нумеруются с 0, а в матрице с 1
          M[i+1, c] := StrToInt(s_x); // нужно привести к целому типу

          // По поводу счётчика елементов 'с' - счётчика чисел в строке
          // мы не можем перебрать элементы из строки в цикле for
          // так как не известно их количество
          // так же мы не можем перебрать элемнты считывая их по одному
          // как в readln т.к. мы имеем только строки и мы должны преобразовать
          // последовательность символов в ЦЕЛОЧИСЛЕННЫЕ элементы матрицы
          // Счётчик элементов 'c' в строке будет увеличиваться каждый раз,
          // когда мы находим(собираем из символом) число в строке
          // и  он будет обнуляться при переходе на новую строку
        end;

        // если мы здесь то дальше какой-то символ - НЕ цифра

        // Перебираем строку до тех пор пока не попадём не цыфру
        // Нам нужны только цыфры, а остальные символы просто пропускаем
        while ((j <= length(Lines[i])) and not (Lines[i][j] in ['0' .. '9'])) do
          j := j + 1;
      end;
    end;
  end;
  // Нужно также задать РАЗМЕРНОСТЬ полученной матрицы
  // Причом здесь уже обязательно писать AMemo.Lines.Count,
  // так как мы не внутри инструкции with
  n:= AMemo.Lines.Count; // число строк и столбцов = числу строк в Memo
end;

{Нажали 'Ввести матрицу'}
procedure TForm1.Button1Click(Sender: TObject);
begin

  // Получаем размерность матрицы от пользователя
  // InputBox возвращает строку, но ГЛОБАЛЬНАЯ переменная 'n' типа integer
  // поэтому преобразуем возвращаем значение в целое число при помощи StrToInt
  n := StrToInt(InputBox('Размерность матрицы', 'Введите целое число', '5'));

  // Теперь так как УЖЕ ЕСТЬ число строк и столбцов
  // Заполняем матрицу
  randomize; // для генератора случайных чисел
  RandomMatrix(M, n);

  // выводим матрицу в Memo1 - исходная матрица
  DisplayMatrix(M, n, Memo1);

end;

{Нажали кнопку 'Влево'}
procedure TForm1.Button2Click(Sender: TObject);
begin
  // Считывам матрицу из Memo1 и узнаём их число строк и столбцов
  // Здесь это не обязательно,
  // так как матрица сохранена уже в ГЛОБАЛЬНОЙ переменной M
  // Но если Препод вдруг ЗАХОЧЕТ, поменять какое-нибудь число в
  // В Memo1 и скажет, что в Memo2 оно тоже должно быть
  // Тогда нужна строчка кода ниже, если такой функционал не требуется
  // то закомментируйте её или удалите
   ReadMatrix(M, n, Memo1);

  // Передвигаем диагональные элементы в строках ВЛЕВО
  MoveLeft(M, n);
  // и выводим полученную матрицу в Memo2
  DisplayMatrix(M, n, Memo2);
end;

{Нажали кнопку 'Вправо'}
procedure TForm1.Button3Click(Sender: TObject);
begin
  // Считывам матрицу из Memo1 и узнаём их число строк и столбцов
  // Здесь это не обязательно,
  // так как матрица сохранена уже в ГЛОБАЛЬНОЙ переменной M
  // Но если Препод вдруг ЗАХОЧЕТ, поменять какое-нибудь число в
  // В Memo1 и скажет, что в Memo2 оно тоже должно быть
  // Тогда нужна строчка кода ниже, если такой функционал не требуется
  // то закомментируйте её или удалите
   ReadMatrix(M, n, Memo1);

  // Передвигаем диагональные элементы в строках ВПРАВО
  MoveRight(M, n);
  // и выводим полученную матрицу в Memo2
  DisplayMatrix(M, n, Memo2);
end;

{Нажали 'Закрыть' - выход из программы}
procedure TForm1.Button4Click(Sender: TObject);
begin
  close;
end;

end.

